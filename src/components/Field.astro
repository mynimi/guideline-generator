---
import ColorPicker from "./ColorPicker.astro";
import Input from "./Input.astro";
import Switch from "./Switch.astro";

export type InputType = "number" | "color" | "checkbox";
type FieldLevel = "minimal" | "balanced" | "maximal";

export interface BaseInput {
  label: string;
  id: string;
  inputType: InputType;
  defaultValue: number | string | boolean;
  helperText?: string;
}

export interface Props extends BaseInput {
  min?: number;
  step?: number;
  max?: number;
}

const { label, helperText, id, inputType, defaultValue, min, step, max } = Astro.props;

const colorOptions = [
  { value: "#A4DDED", label: "non-photo blue" },
  { value: "#b3b3b3", label: "30% Black" },
  { value: "#808080", label: "50% Black" },
  { value: "#000000", label: "Black" },
  { value: "custom", label: "Custom" },
];
---

<div>
  {
    inputType === "checkbox" && (
      <Switch
        label={label}
        id={id}
        defaultValue={defaultValue}
        helperText={helperText}
      />
    )
  }
  {
    inputType === "color" && (
      <Fragment>
        <ColorPicker 
          label={label}
          id={id}
          defaultValue={defaultValue}
          helperText={helperText}
        ></ColorPicker>
      </Fragment>
    )
  }
  {
    inputType !== "checkbox" && inputType !== "color" && (
      <Input
        inputType={inputType}
        label={label}
        id={id}
        defaultValue={defaultValue}
        helperText={helperText}
        min={min}
        step={step}
        max={max}
      />
    )
  }
</div>

<style lang="scss">
  div {
    margin: 0.5em 0;
  }
</style>

<script>
  import { $gridConfig } from "../../store";

  const colorRadios = document.querySelectorAll("[data-color]");

  const updateValue = (id, value) => {
    const currentConfig = { ...$gridConfig.get() };
    if (currentConfig[id]) {
      currentConfig[id] = value;
    } else {
      currentConfig[id] = value;
    }
    $gridConfig.set(currentConfig);
  };

  colorRadios.forEach((radio) => {
    radio.addEventListener("change", (e) => {
      const customColorInput = radio.parentElement.querySelector("[data-custom-color]");
      const { name, value } = e.target;
      let val = value;
      if (value === "custom") {
        val = customColorInput.value;
      }
      updateValue(name, val);
    });
  });
  const customColorInputs = document.querySelectorAll("[data-custom-color]");
  customColorInputs.forEach((input) => {
    input.addEventListener("input", (e) => {
      const { name, value } = e.target;
      const span = input.parentElement;
      span.style.setProperty("--_c", value);
    });
  });
</script>
