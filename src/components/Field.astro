---
export type InputType = "number" | "color" | "checkbox";
type FieldLevel = "minimal" | "balanced" | "maximal";

export interface Props {
  label: string;
  helperText?: string;
  id: string;
  inputType: InputType;
  defaultValue: number | string | boolean;
  level: FieldLevel;
  min?: number;
  step?: number;
  max?: number;
}

const { label, helperText, id, inputType, defaultValue, level, min, step, max } = Astro.props;

const colorOptions = [
  { value: "#A4DDED", label: "non-photo blue" },
  { value: "#b3b3b3", label: "30% Black" },
  { value: "#808080", label: "50% Black" },
  { value: "#000000", label: "Black" },
  { value: "custom", label: "Custom" },
];
---
<div>
  {
    inputType === "checkbox" && (
      <Fragment>
        <label class:list={["field", `field--${inputType}`]}>
          <input
            data-checkbox
            type={inputType}
            id={id}
            name={id}
            checked={defaultValue}
          />
          <span>{label}</span>
        </label>
        {helperText && <p>{helperText}</p>}
      </Fragment>
    )
  }
  {
    inputType === "color" && (
      <label class="field field--color">
        <fieldset class="color-group">
          <legend>{label}</legend>
          {colorOptions.map((option) => (
            <label>
              <input
                data-color
                type="radio"
                name={id}
                value={option.value}
                checked={option.value === defaultValue}
              />
              <span style={`--_c: ${option.value !== 'custom' ? option.value : 'red'};`}>
                {option.label !== "Custom" ? (
                  option.label
                ) : (
                  <Fragment>
                    Custom (Enter Hexcode)
                    <input
                      data-custom-color
                      type="text"
                      name={`${id}-custom-color`}
                      aria-label="Add Custom Color (in Hex Format)"
                      pattern="^#([A-Fa-f0-9]{3}|[A-Fa-f0-9]{6})$"
                      maxlength="7"
                      value="#ff0000"
                    />
                  </Fragment>
                )}
              </span>
            </label>
          ))}
        </fieldset>
      </label>
    )
  }
  {
    inputType === "number" && (
      <label class:list={["field", `field--${inputType}`]}>
        <span>{label}</span>
        <input
          data-field
          type={inputType}
          id={id}
          name={id}
          value={defaultValue}
          min={min}
          step={step}
          max={max}
        />
        {helperText && <p>{helperText}</p>}
      </label>
    )
  }
</div>

<style lang="scss">
  div {
    margin: 0.5em 0;
  }
</style>

<script>
  import {$gridConfig} from "../../store";

  const checkboxes = document.querySelectorAll("[data-checkbox]");
  const colorRadios = document.querySelectorAll("[data-color]");
  const numberFields = document.querySelectorAll("[data-field]");
  const currentConfig = $gridConfig;

  const updateValue = (id, value) => {
    const currentConfig = {...$gridConfig.get()};
    if(currentConfig[id]){
      currentConfig[id] = value;
    } else {
      currentConfig[id] = value;
    }
    $gridConfig.set(currentConfig);
  };

  checkboxes.forEach((checkbox) => {
    checkbox.addEventListener("change", (e) => {
      const { id, checked } = e.target;
      updateValue(id, checked);
    });
  });
  numberFields.forEach((field) => {
    field.addEventListener("input", (e) => {
      const { id, value } = e.target;
      updateValue(id, parseFloat(value));
    });
  });
  colorRadios.forEach((radio) => {
    radio.addEventListener("change", (e) => {
      const customColorInput = radio.parentElement.querySelector("[data-custom-color]");
      const { name, value } = e.target;
      let val = value;
      if(value === 'custom'){
        val = customColorInput.value;
      }
      updateValue(name, val);
    });
  });
  const customColorInputs = document.querySelectorAll("[data-custom-color]");
  customColorInputs.forEach((input) => {
    input.addEventListener("input", (e) => {
      const { name, value } = e.target;
      const span = input.parentElement;
      span.style.setProperty("--_c", value);
    });
  });
</script>