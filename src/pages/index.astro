---
import GridTypeTabs from "../components/form/GridTypeTabs.astro";
import Base from "../layouts/Base.astro";

const svgId = "preview";
---

<Base>
  <div class="grid">
    <div class="config">
      <div class="config__intro">
        <h1 class="config__title">Guideline Maker</h1>
        <p>
          A super-flexible generator for (Calligraphy) Writing Paper. It also can make graph and dot grid paper, in PDF
          and SVG format and can be printed from within the browser.
        </p>
        <p>Play with the options and see it change in real time.</p>
      </div>
      <GridTypeTabs svgId={svgId} />
      <div class="config__outro">
        <h2>Export</h2>
        <p>You can either print from this site directly using the Print Command (make sure document and page size match), or use one of the two buttons below to download.</p>
        <p>Please note, that you are free to use these grids, but don't remove the Copyright information.</p>
        <p><small>this site uses google analytics. Leave if you don't want this data to be collected.</small></p>
        <div class="button-group">
          <button data-save-svg>Download SVG</button>
          <button data-download-pdf>Download PDF</button>
        </div>
      </div>
    </div>
    <div class="grid__preview">
      <div
        role="img"
        aria-label="Preview of the generated grid"
        aria-live="polite"
        class="svg-wrapper"
        id={svgId}
        data-svg-preview
      >
      </div>
    </div>
  </div>
</Base>
<script>
  import { CalligraphyAreaPage } from "../guideline-generator/CalligraphyAreaMaker";
  import { CalligraphyLinePage } from "../guideline-generator/CalligraphyLineMaker";
  import { DotGridPage } from "../guideline-generator/DotGridMaker";
  import { GraphGridPage } from "../guideline-generator/GraphGridMaker";
  import { $currentGridType, $gridConfig } from "../../store";
  import { jsPDF } from "jspdf";
  import { svg2pdf } from "svg2pdf.js";

  let gridInstance = null;

  const makeGrid = (type, config) => {
    switch (type) {
      case "line":
        return new CalligraphyLinePage(config);
      case "area":
        return new CalligraphyAreaPage(config);
      case "dot":
        return new DotGridPage(config);
      case "graph":
        return new GraphGridPage(config);
    }
  };

  const svgEl = document.querySelector("[data-svg-preview]");
  const saveSVGButton = document.querySelector("[data-save-svg]");
  const downloadPDFButton = document.querySelector("[data-download-pdf]");

  $gridConfig.subscribe((config) => {
    console.log("gridconfig updated");
    if (!svgEl) return;
    svgEl.innerHTML = "";
    gridInstance = makeGrid($currentGridType.get(), config);
    if (gridInstance) svgEl.appendChild(gridInstance.makeSVG());
  });

  $currentGridType.subscribe((gridType) => {
    console.log("gridtype updated");
    if (!svgEl) return;
    svgEl.innerHTML = "";
    gridInstance = makeGrid(gridType, $gridConfig.get());
    if (gridInstance) svgEl.appendChild(gridInstance.makeSVG());
  });

  saveSVGButton.addEventListener("click", () => {
    const svg = svgEl.querySelector("svg");
    const svgString = new XMLSerializer().serializeToString(svg);
    const blob = new Blob([svgString], { type: "image/svg+xml" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = `${gridInstance.fileName}.svg`;
    a.click();
    URL.revokeObjectURL(url);
  });

  downloadPDFButton.addEventListener("click", async () => {
    const svg = svgEl.querySelector("svg");
    if (!svg) return;

    const width = gridInstance.width;
    const height = gridInstance.height;
    const orientation = width > height ? "landscape" : "portrait";
    // Create a new jsPDF document
    const doc = new jsPDF({
      orientation: orientation,
      unit: "mm",
      format: [width, height],
    });

    doc
      .svg(svg as Element, {
        width: width,
        height: height,
      })
      .then(() => {
        doc.save(`${gridInstance.fileName}.pdf`);
      });
  });
</script>
